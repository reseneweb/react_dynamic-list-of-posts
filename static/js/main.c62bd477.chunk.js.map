{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","services/postComments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","services/users.ts","services/userPosts.ts","index.tsx"],"names":["PostsList","userPosts","selectedPost","handleButtonClick","className","map","post","id","title","type","cn","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","selectedPostId","setPostComments","postComments","setErrorMessage","useState","name","setName","hasNameError","setHasNameError","email","setEmail","hasEmailError","setHasEmailError","comment","setComment","hasCommentError","setHasCommentError","loading","setLoading","addComment","postId","commentName","commentEmail","createComment","newComment","catch","finally","onSubmit","event","preventDefault","trim","length","htmlFor","placeholder","classNames","value","onChange","target","PostDetails","errorMessage","writeCommentButton","setWriteCommentButton","useEffect","current","handleDelete","commentId","filter","deleteComment","error","href","UserSelector","users","selectedUser","setSelectedUser","dropdownIsActive","setDropdownIsActive","dropdownRef","useRef","handleClickOutside","contains","document","addEventListener","removeEventListener","ref","role","user","handleUserSelect","App","setUsers","setUserPosts","setSelectedPost","conditionForNoPostsYet","userId","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c62bd477.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  userPosts: Post[];\n  selectedPost: Post | null;\n  handleButtonClick: (post: Post) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  selectedPost,\n  handleButtonClick,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn('button is-link',\n                    { 'is-light': selectedPost?.id !== post.id })}\n                  onClick={() => handleButtonClick(post)}\n                >\n                  {selectedPost?.id !== post.id ? 'Open' : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { createComment } from '../services/postComments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPostId: number;\n  setPostComments: (comm: Comment[]) => void;\n  postComments: Comment[];\n  setErrorMessage: (err: string) => void;\n};\n\nexport const NewCommentForm: React.FC<Props>\n  = ({\n    selectedPostId,\n    setPostComments,\n    postComments,\n    setErrorMessage,\n  }) => {\n    const [name, setName] = useState('');\n    const [hasNameError, setHasNameError] = useState(false);\n    const [email, setEmail] = useState('');\n    const [hasEmailError, setHasEmailError] = useState(false);\n    const [comment, setComment] = useState('');\n    const [hasCommentError, setHasCommentError] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setName(event.target.value);\n      setHasNameError(false);\n    };\n\n    const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setEmail(event.target.value);\n      setHasEmailError(false);\n    };\n\n    const handleCommentChange\n      = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setComment(event.target.value);\n        setHasCommentError(false);\n      };\n\n    function addComment({\n      postId,\n      name: commentName,\n      email: commentEmail,\n      body,\n    }: Comment) {\n      setErrorMessage('');\n      setLoading(true);\n\n      createComment({\n        postId,\n        name: commentName,\n        email: commentEmail,\n        body,\n      })\n        .then(newComment => {\n          setPostComments([...postComments, newComment]);\n          setComment('');\n        })\n        .catch(() => {\n          setErrorMessage('Something went wrong!');\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n\n    const handleAdd = (event: React.FormEvent) => {\n      event.preventDefault();\n\n      setHasNameError(!name.trim());\n      setHasEmailError(!email.trim());\n      setHasCommentError(!comment.trim());\n\n      if (!name.trim() || !email.trim() || !comment.trim()) {\n        return;\n      }\n\n      addComment({\n        id: postComments.length,\n        postId: selectedPostId,\n        name,\n        email,\n        body: comment,\n      });\n    };\n\n    const handleClear = () => {\n      setName('');\n      setEmail('');\n      setComment('');\n    };\n\n    return (\n      <form\n        data-cy=\"NewCommentForm\"\n        onSubmit={handleAdd}\n      >\n        <div className=\"field\" data-cy=\"NameField\">\n          <label className=\"label\" htmlFor=\"comment-author-name\">\n            Author Name\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              id=\"comment-author-name\"\n              placeholder=\"Name Surname\"\n              className={classNames('input', {\n                'is-danger': hasNameError,\n              })}\n              value={name}\n              onChange={handleNameChange}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-user\" />\n            </span>\n\n            {hasNameError && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n          </div>\n\n          {hasNameError && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Name is required\n            </p>\n          )}\n        </div>\n\n        <div className=\"field\" data-cy=\"EmailField\">\n          <label className=\"label\" htmlFor=\"comment-author-email\">\n            Author Email\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            <input\n              type=\"text\"\n              name=\"email\"\n              id=\"comment-author-email\"\n              placeholder=\"email@test.com\"\n              className={classNames('input', {\n                'is-danger': hasEmailError,\n              })}\n              value={email}\n              onChange={handleEmailChange}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-envelope\" />\n            </span>\n\n            {hasEmailError && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n          </div>\n\n          {hasEmailError && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Email is required\n            </p>\n          )}\n        </div>\n\n        <div className=\"field\" data-cy=\"BodyField\">\n          <label className=\"label\" htmlFor=\"comment-body\">\n            Comment Text\n          </label>\n\n          <div className=\"control\">\n            <textarea\n              id=\"comment-body\"\n              name=\"body\"\n              placeholder=\"Type comment here\"\n              className={classNames('input', {\n                'is-danger': hasCommentError,\n              })}\n              value={comment}\n              onChange={handleCommentChange}\n            />\n          </div>\n\n          {hasCommentError && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Enter some text\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className={classNames('button is-link',\n                { 'is-loading': loading })}\n            >\n              Add\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {/* eslint-disable-next-line react/button-has-type */}\n            <button\n              type=\"reset\"\n              className=\"button is-link is-light\"\n              onClick={handleClear}\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n      </form>\n    );\n  };\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment\n= ({\n  postId,\n  name,\n  email,\n  body,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { getComments, deleteComment } from '../services/postComments';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedPost: Post | null;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [writeCommentButton, setWriteCommentButton] = useState(true);\n\n  useEffect(() => {\n    if (selectedPost) {\n      setLoading(true);\n\n      getComments(selectedPost.id)\n        .then(setPostComments)\n        .catch(() => setErrorMessage('Something went wrong!'))\n        .finally(() => setLoading(false));\n    }\n\n    setWriteCommentButton((current) => {\n      if (!current) {\n        return true;\n      }\n\n      return current;\n    });\n  }, [selectedPost]);\n\n  const handleDelete = (commentId: number) => {\n    setErrorMessage('');\n    setPostComments(\n      postComments.filter(comment => comment.id !== commentId),\n    );\n\n    deleteComment(commentId)\n      .catch((error) => {\n        setErrorMessage('Unable to delete a comment');\n        throw error;\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loading && (\n            <Loader />\n          )}\n\n          {!loading && errorMessage && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {errorMessage}\n            </div>\n          )}\n\n          {!loading && !errorMessage && !postComments.length && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!loading && !!postComments.length && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {postComments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!loading && writeCommentButton && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setWriteCommentButton(!writeCommentButton)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {selectedPost && !loading && !writeCommentButton && (\n          <NewCommentForm\n            selectedPostId={selectedPost.id}\n            postComments={postComments}\n            setPostComments={setPostComments}\n            setErrorMessage={setErrorMessage}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  setSelectedUser: (user: User | null) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [dropdownIsActive, setDropdownIsActive] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement | null>(null);\n\n  const handleUserSelect = (user: User) => {\n    setSelectedUser(user);\n    setDropdownIsActive(false);\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (dropdownRef.current\n      && !dropdownRef.current.contains(event.target as Node)) {\n      setDropdownIsActive(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      ref={dropdownRef}\n      className={cn('dropdown', { 'is-active': dropdownIsActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropdownIsActive(!dropdownIsActive)}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn('dropdown-item',\n                { 'is-active': user.id === selectedUser?.id })}\n              onClick={() => handleUserSelect(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './services/users';\nimport { getUserPosts } from './services/userPosts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const conditionForNoPostsYet = !loading && !errorMessage\n    && !userPosts.length && selectedUser;\n\n  const handleButtonClick = (post: Post) => {\n    if (selectedPost?.id === post.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setLoading(true);\n\n      getUserPosts(selectedUser.id)\n        .then(setUserPosts)\n        .catch(() => setErrorMessage('Something went wrong!'))\n        .finally(() => setLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {loading && (\n                  <Loader />\n                )}\n\n                {!loading && errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {conditionForNoPostsYet && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!loading && !!userPosts.length && (\n                  <PostsList\n                    userPosts={userPosts}\n                    selectedPost={selectedPost}\n                    handleButtonClick={handleButtonClick}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails selectedPost={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}